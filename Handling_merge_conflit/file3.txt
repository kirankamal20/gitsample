import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:get/get.dart';

import 'package:ensemble_manager/app/core/constants/app_strings.dart';
import 'package:ensemble_manager/app/core/theme/colors.dart';
import 'package:ensemble_manager/app/data/models/deploy/stores_deploy.dart';
import 'package:ensemble_manager/app/data/models/deploy/work_station_model.dart';
import 'package:ensemble_manager/app/global/widgets/file_image_viewer.dart';
import 'package:ensemble_manager/app/module/deploy/controllers/deploy_controller.dart';
import 'package:ensemble_manager/app/module/deploy/widgets/deploy_description.dart';

class DeployScreen extends GetView<DeployScreenController> {
  const DeployScreen({Key? key}) : super(key: key);

  Widget _showCard(String title, String body) {
    return Card(
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            width: Get.context!.width * 1,
            decoration: const BoxDecoration(
              color: AppColors.cardTitleColor,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(5),
                topRight: Radius.circular(5),
              ),
            ),
            child: Text(
              title,
              style: const TextStyle(
                color: Colors.black87,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          Container(
            padding: const EdgeInsets.all(8),
            width: Get.context!.width * 1,
            decoration: const BoxDecoration(
              borderRadius: BorderRadius.only(
                bottomLeft: Radius.circular(5),
                bottomRight: Radius.circular(5),
              ),
            ),
            child: Text(body),
          )
        ],
      ),
    );
  }

  Widget _selectDeplyType() => Obx(
        () => DropdownButtonFormField<String>(
          key: const Key("selectDeplyTypeKey"),
          isExpanded: true,
          isDense: true,
          icon: const Icon(Icons.keyboard_arrow_down),
          decoration: const InputDecoration(
            label: Text('Select Deploy Type'),
            contentPadding: EdgeInsets.symmetric(
              vertical: 16,
              horizontal: 20.0,
            ),
          ),
          value: controller.selectedDeployType!.value,
          items: controller.deployTypes
              .map(
                (item) => DropdownMenuItem<String>(
                  value: item,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 8.0),
                    child: Text(item),
                  ),
                ),
              )
              .toList(),
          onChanged: (selectedValue) =>
              controller.onChangeDeployType(selectedValue!),
          validator: (selectedValue) {
            if (selectedValue == null) {
              return 'Please select Deploy type';
            }
            return null;
          },
        ),
      );

  Widget _selectWorkSpaceType() => Obx(
        () => Visibility(
          visible: controller.isDeployToStore.value,
          child: Column(
            children: [
              const SizedBox(height: 10),
              DropdownButtonFormField<GetStoreTypeDeploys>(
                key: const Key('SelectWorkSpaceTypeKey'),
                isExpanded: true,
                isDense: true,
                icon: const Icon(Icons.keyboard_arrow_down),
                decoration: const InputDecoration(
                  label: Text('Select Workspace Type'),
                  contentPadding: EdgeInsets.symmetric(
                    vertical: 16,
                    horizontal: 20.0,
                  ),
                ),
                value: controller.selectedWorkSpace.value,
                items: controller.workspacelist
                    .map(
                      (workspace) => DropdownMenuItem<GetStoreTypeDeploys>(
                        value: workspace,
                        child: Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 8.0),
                          child: Text(workspace.storeTypeName!),
                        ),
                      ),
                    )
                    .toList(),
                onChanged: (selectedValue) =>
                    controller.onChangeWorkspaceType(selectedValue!),
                validator: (selectedValue) {
                  if (selectedValue == null) {
                    return 'Please select Workspace type';
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      );

  Widget _workSpaceTypeID() {
    return Obx(
      () => Visibility(
        visible: controller.isDeployToStore.value,
        child: Column(
          children: [
            const SizedBox(height: 10),
            TextFormField(
              key: const Key('WorkSpaceTypeIdKey'),
              onTap: controller.onTapWorkSpaceId,
              controller: controller.workspaceIdController,
              readOnly: true,
              decoration: InputDecoration(
                labelText: AppStrings.workSpace,
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8.0),
                  borderSide: const BorderSide(),
                ),
              ),
              validator: (String? workSpaceId) {
                if (workSpaceId!.isEmpty) {
                  return 'Please select workspace ID';
                }
                return null;
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _storeDetails() => Obx(
        () => Visibility(
          visible: controller.selectedStore.value != null,
          child: Column(
            children: [
              _showCard(
                'WorkSpace Type',
                controller.selectedStore.value == null
                    ? "Not Available"
                    : controller.selectedStore.value!.storetypeName! == ''
                        ? "Not Available"
                        : controller.selectedStore.value!.storetypeName!,
              ),
              _showCard(
                'Site',
                controller.selectedStore.value == null
                    ? "Not Available"
                    : controller.selectedStore.value!.site! == ''
                        ? "Not Available"
                        : controller.selectedStore.value!.site!,
              ),
            ],
          ),
        ),
      );

  Widget _selectEntityUser() => Obx(
        () => Visibility(
          visible: controller.isDeployToUser.value,
          child: Column(
            children: [
              const SizedBox(height: 4),
              TextFormField(
                key: const Key('selectUserKey'),
                onTap: controller.onTapSelectUser,
                controller: controller.selectUserController,
                readOnly: true,
                decoration: InputDecoration(
                  labelText: 'Select User',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8.0),
                    borderSide: const BorderSide(),
                  ),
                ),
                validator: (String? workSpaceId) {
                  if (workSpaceId!.isEmpty) {
                    return 'Please select a User';
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      );

  Widget _selectWorkStations() => Obx(
        () => Visibility(
          visible: controller.isDeployToUser.value,
          child: Column(
            children: [
              const SizedBox(height: 10),
              DropdownButtonFormField<Getworkstationuserdropdown>(
                key: const Key("selectWorkStaionDropDownKey"),
                isExpanded: true,
                isDense: true,
                icon: const Icon(Icons.keyboard_arrow_down),
                decoration: const InputDecoration(
                  label: Text('Select Workstation'),
                  contentPadding: EdgeInsets.symmetric(
                    vertical: 16,
                    horizontal: 20.0,
                  ),
                ),
                value: controller.selectedUserWorkStation.value,
                items: controller.userWorkStationList
                    .map(
                      (item) => DropdownMenuItem<Getworkstationuserdropdown>(
                        value: item,
                        child: Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 8.0),
                          child: Text(item.storeName!),
                        ),
                      ),
                    )
                    .toList(),
                onChanged: (selectedValue) =>
                    controller.onChangSelectWorkStation(selectedValue!),
                validator: (selectedValue) {
                  if (selectedValue == null) {
                    return 'Please select Workstation';
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      );

  Widget _serialNumber() {
    return TextFormField(
      key: const ValueKey("serialNumberKey"),
      controller: controller.serialNumberController,
      decoration: InputDecoration(
        labelText: AppStrings.serialNumber,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8.0),
          borderSide: const BorderSide(),
        ),
        suffixIcon: IconButton(
          key: const Key('EyeButtonKey'),
          icon: const Icon(Icons.remove_red_eye),
          onPressed: controller.onTapShowSerialNumDesc,
        ),
      ),
      validator: (String? serialNumber) {
        if (serialNumber!.isEmpty) {
          return 'Please enter serial Number to fetch details';
        }
        return null;
      },
    );
  }

  Widget _cameraContainer() {
    return Row(
      key: const Key("cameraContainerKey"),
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          children: [
            Obx(
              () => Container(
                height: Get.context!.width * 0.28,
                width: Get.context!.width * 0.28,
                decoration: BoxDecoration(
                  color: AppColors.appCustomBlack,
                  borderRadius: BorderRadius.circular(15),
                  border: Border.all(color: Colors.black54),
                ),
                child: controller.qrCodeImageFile.value == null
                    ? InkWell(
                        key: const Key('qrcodeImageKey'),
                        onTap: () {
                          controller.getFile('qrCode');
                        },
                        child: Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: const [
                              Icon(
                                Icons.qr_code,
                                color: AppColors.customWhite,
                                size: 30,
                              ),
                              Gap(10),
                              Flexible(
                                child: Text(
                                  'Click picture of QR code image',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    color: AppColors.customWhite,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      )
                    : InkWell(
                        onTap: () async {
                          final result = await Get.to(
                            () => FileImageFullView(
                              imageFile: controller.qrCodeImageFile,
                            ),
                          );

                          if (result != null) {
                            controller.qrCodeImageFile.value = result.value;
                          }
                        },
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(15),
                          child: Image.file(
                            controller.qrCodeImageFile.value!,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
              ),
            ),
            const Text(
              'QR code image',
              style: TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
          ],
        ),
        Column(
          children: [
            Obx(
              () => Container(
                key: const Key('qrProductCodeImageKey'),
                height: Get.context!.width * 0.28,
                width: Get.context!.width * 0.28,
                decoration: BoxDecoration(
                  color: AppColors.appCustomBlack,
                  borderRadius: BorderRadius.circular(15),
                  border: Border.all(color: Colors.black54),
                ),
                child: controller.qrProductImageFile.value == null
                    ? InkWell(
                        onTap: () async {
                          await controller.getFile('qrProductCode');
                        },
                        child: Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: const [
                              Icon(
                                Icons.add_photo_alternate_outlined,
                                color: AppColors.customWhite,
                                size: 30,
                              ),
                              Gap(10),
                              Flexible(
                                child: Text(
                                  'Click picture of product image',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    color: AppColors.customWhite,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      )
                    : InkWell(
                        onTap: () async {
                          final result = await Get.to(
                            () => FileImageFullView(
                              imageFile: controller.qrProductImageFile,
                            ),
                          );

                          if (result != null) {
                            controller.qrProductImageFile.value = result.value;
                          }
                        },
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(15),
                          child: Image.file(
                            controller.qrProductImageFile.value!,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
              ),
            ),
            const Text(
              'Product image',
              style: TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
          ],
        ),
        Column(
          children: [
            Obx(
              () => Container(
                height: Get.context!.width * 0.28,
                width: Get.context!.width * 0.28,
                decoration: BoxDecoration(
                  color: AppColors.appCustomBlack,
                  borderRadius: BorderRadius.circular(15),
                  border: Border.all(color: Colors.black54),
                ),
                child: controller.qrLocationImageFile.value == null
                    ? InkWell(
                        key: const Key('qrLocationCodeImageKey'),
                        onTap: () async {
                          await controller.getFile('qrLocationCode');
                        },
                        child: Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: const [
                              Icon(
                                Icons.add_location_alt_outlined,
                                color: AppColors.customWhite,
                                size: 30,
                              ),
                              Gap(10),
                              Flexible(
                                child: Text(
                                  'Click picture of product location image',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    color: AppColors.customWhite,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      )
                    : InkWell(
                        onTap: () async {
                          final result = await Get.to(
                            () => FileImageFullView(
                              imageFile: controller.qrLocationImageFile,
                            ),
                          );

                          if (result != null) {
                            controller.qrLocationImageFile.value = result.value;
                          }
                        },
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(15),
                          child: Image.file(
                            controller.qrLocationImageFile.value!,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
              ),
            ),
            const Text(
              'Product Location\n image',
              style: TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ],
    );
  }

  Widget buttomNevBar() => Container(
        key: const Key("buttomNevBarKey"),
        height: Get.context!.height * 0.076,
        width: Get.context!.width,
        decoration: const BoxDecoration(
          color: Color(0xFFF2EBEB),
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(30),
            topRight: Radius.circular(30),
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.symmetric(
            horizontal: 10,
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              SizedBox(
                width: Get.context!.width * 0.8,
                height: Get.context!.height * 0.062,
                child: ElevatedButton(
                  key: const Key('deployInventoryButtonKey'),
                  onPressed: controller.onDeployInv,
                  style: ButtonStyle(
                    backgroundColor: MaterialStateProperty.all<Color>(
                      const Color(0xFF00B1F5),
                    ),
                  ),
                  child: const Text(
                    'DEPLOY INVENTORY',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                      letterSpacing: 0.4,
                    ),
                  ),
                ),
              ),
              FloatingActionButton(
                shape: const CircleBorder(),
                backgroundColor: AppColors.lightYellow,
                onPressed: controller.onQrButtonTap,
                child: const Icon(
                  Icons.qr_code,
                  color: AppColors.appCustomBlack,
                  size: 36,
                ),
              ),
            ],
          ),
        ),
      );

  Widget _organizationcode() => Obx(
        () => Visibility(
          visible: controller.selectedItemDesc.value != null &&
              controller.selectedItemDesc.value!.siSerialNumber == "",
          child: TextFormField(
            controller: controller.organizationController,
            decoration: InputDecoration(
              labelText: 'Scan Organization code',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8.0),
                borderSide: const BorderSide(),
              ),
              suffixIcon: IconButton(
                icon: const Icon(Icons.qr_code),
                onPressed: controller.onTapOrgCode,
              ),
            ),
            validator: (String? orgCode) {
              if (orgCode!.isEmpty) {
                return 'Please scan organization code';
              }
              return null;
            },
          ),
        ),
      );

  Widget _serialDescription() => Obx(
        () => Column(
          key: const Key("serialDescriptionKey"),
          children: [
            ...controller.serialNumberDescList.map(
              (element) => Column(
                children: [
                  Row(
                    children: [
                      Radio<int>(
                        key: const Key('radioButtonKey'),
                        toggleable: false,
                        value: element.siId!.toInt(),
                        groupValue: controller.radioValue.value,
                        onChanged: (newValue) {
                          controller.radioValue.value = newValue!;
                          controller.selectItemDesc(newValue);
                        },
                      ),
                      Text(
                        '${element.siSerialNumber == "" ? 'NA' : element.siSerialNumber}',
                        style: const TextStyle(
                            fontWeight: FontWeight.bold, fontSize: 20),
                      ),
                    ],
                  ),
                  DeployDescription(
                    itemDescription: element,
                  ),
                ],
              ),
            ),
          ],
        ),
      );

  @override
  Widget build(BuildContext context) {
    bool keyboardIsOpen = MediaQuery.of(context).viewInsets.bottom != 0;
    return SafeArea(
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Deploy'),
          flexibleSpace: Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.bottomLeft,
                end: Alignment.topRight,
                colors: <Color>[
                  Color(0XFF7DD7FA),
                  Color(0XFF31C0F7),
                  Color(0XFF1AB9F6),
                  Color(0XFF00B1F5),
                ],
              ),
              borderRadius: BorderRadius.vertical(
                bottom: Radius.circular(10.0),
              ),
            ),
          ),
          actions: [
            Padding(
              padding: const EdgeInsets.symmetric(
                vertical: 8,
                horizontal: 10,
              ),
              child: ElevatedButton(
                onPressed: controller.onReset,
                style: ButtonStyle(
                  elevation: MaterialStateProperty.all<double>(0),
                ),
                child: Row(
                  children: const [
                    Icon(Icons.sync),
                    Text('Reset'),
                  ],
                ),
              ),
            )
          ],
        ),
        body: Stack(
          key: const Key("deployStackKey"),
          children: [
            Form(
              key: controller.formKey,
              autovalidateMode: AutovalidateMode.onUserInteraction,
              child: ListView(
                key: const Key('deploylistViewKey'),
                padding: EdgeInsets.only(
                  left: 10,
                  right: 10,
                  top: 10,
                  bottom: Get.context!.height * 0.08,
                ),
                children: [
                  _selectDeplyType(),
                  _selectWorkSpaceType(),
                  _workSpaceTypeID(),
                  const SizedBox(height: 4),
                  _storeDetails(),
                  _selectEntityUser(),
                  _selectWorkStations(),
                  const SizedBox(height: 8),
                  _serialNumber(),
                  const SizedBox(height: 10),
                  _cameraContainer(),
                  const SizedBox(height: 10),
                  _organizationcode(),
                  _serialDescription(),
                ],
              ),
            ),
            Obx(
              () => Visibility(
                visible: controller.isLoading.value,
                child: const Center(
                  child: CircularProgressIndicator(),
                ),
              ),
            ),
            Visibility(
              visible: !keyboardIsOpen,
              child: Positioned(
                bottom: 0,
                child: buttomNevBar(),
              ),
            ),
          ],
        ),
      ),
    );
  }
}